console.log("[import] git: 1abe138fc78d51278192f86459ce88a41deed052, stamp: A3BD4CA205BA7D73");
!function(){let e,t=e=>{};function r(t){e=t}function n(e){t=e}function o(e){t(e)}let s=!1;function a(){console.log("cancelConversion"),s=!0,g&&(g.terminate(),g=null),u&&(u=null);for(let e in m){let t=m[e];delete m[e],t.reject({status:5,message:"Canceled import."})}}function l(){return s}function i(){s=!1}function c(e,t){let r=e.dataTransfer,n=Array.prototype.forEach;function o(e,r){if(l())return;let n=new FileReader;n.onload=(()=>{l()?console.log("reader loaded. canceled -- skipping callback"):t(r,new Uint8Array(n.result))}),n.readAsArrayBuffer(e)}if(i(),r.items){let e=!1;if(n.call(r.items,t=>{if(t.webkitGetAsEntry){let r=t.webkitGetAsEntry();if(r){let t=r.name;r.isDirectory?r.getFile("Data",null,e=>e.file(e=>o(e,t))):r.isFile&&r.file(e=>o(e,t)),e=!0}}}),e)return}n.call(r.files,e=>o(e,e.name))}let u=null,d=!0;function f(){d=!1}function p(){if(!u){let t=e||"import.worker.js",r=e=>{try{g=new Worker(e)}catch(e){throw u=null,new Error("Failed to load the web worker. Please contact Figma for support.")}return g.onmessage=w,g};u=d?function(e,t){return new Promise((r,n)=>{let o=new XMLHttpRequest;o.onload=(()=>{o.status>=200&&o.status<400&&r(o.response)}),o.onloadend=(()=>{n(new Error("Failed to download the file importer. Please make sure you're connected to the internet and try again."))}),o.open("GET",e),o.responseType=t,o.send(null)})}(t,"blob").then(e=>r(URL.createObjectURL(e))):new Promise((e,n)=>{e(r(t))})}return u}let g=null,m={},b=0;function w(e){let r=e.data;switch(r.type){case"ConversionFailureResponse":{let e=r;if(e.id in m){let t=m[e.id];delete m[e.id],t.reject({message:e.message,stack:e.stack})}break}case"ConversionSuccessResponse":{let e=r;if(e.id in m){let r=m[e.id];delete m[e.id],l()?(t(100),r.reject({message:"Import canceled",stack:{}})):(t(20),r.resolve(e.result))}break}case"UpdateProgressMessage":{let e=r;t&&t(e.percentage);break}case"LoadFontMessage":{let t=r,n=m[t.id];(n&&n.fontLoader?n.fontLoader.getFont(t.postscript):Promise.reject(null)).then(r=>{let n={type:"FontLoadedMessage",id:t.id,postscript:t.postscript,result:r};e.target.postMessage(n,[r.font.buffer])}).catch(()=>{let r={type:"FontLoadedMessage",id:t.id,postscript:t.postscript,result:null};e.target.postMessage(r)});break}default:console.warn("import shim got unsupported message: "+r.type)}}function y(e,t){if(e.length<t.length)return!1;for(let r=0;r<t.length;r++)if(e[r]!==t[r])return!1;return!0}function F(e){return p().then(t=>new Promise((r,n)=>{let o=e.message.id;m[o]={resolve:r,reject:n,fontLoader:e.fontLoader},t.postMessage(e.message,e.buffers)}))}function h({bytes:e,featureFlags:t,fontLoader:r,isUserFigmaEmployee:n}){return new Promise((o,s)=>{if(!l())if(k(e)||L(e)){let t=URL.createObjectURL(new Blob([e])),n=new Image;n.onerror=(()=>{s({message:"Invalid image",stack:(new Error).stack})}),n.onload=(()=>{F({message:{type:"ImageConversionRequest",id:b++,bytes:e,width:n.width,height:n.height},buffers:[e.buffer],fontLoader:r}).then(o,s),URL.revokeObjectURL(t)}),n.src=t}else{F({message:{type:"FileConversionRequest",id:b++,bytes:e,featureFlags:t,isUserFigmaEmployee:n},buffers:[e.buffer],fontLoader:r}).then(o,s)}})}function k(e){return y(e,[137,80,78,71,13,10,26,10])}function L(e){return y(e,[255,216])}function P(e){return y(e,[71,73,70,56,55,97])||y(e,[71,73,70,56,57,97])}window.createFileImporter=(e=>(delete window.createFileImporter,r(e),{convertFile:h,disableWorkerBlob:f,cancelConversion:a,hasCanceled:l,resetCancel:i,setUpdateProgressCallback:n,callUpdateProgressCallback:o,extractFilesFromDropEvent:c,isProbablyJPEGFile:L,isProbablyPNGFile:k,isProbablyGIFFile:P}))}();
